import { useParams, Link } from "react-router-dom";
import { useState } from "react";
import Layout from "../Layout";
import exploitations from "../assets/exploitations.mock";
import { scenarios, resultatsScenarios } from "../assets/scenarios.mock";
import ContexteSection from "../components/ContexteSection";
import ResultatsSection from "../components/ResultatsSection";

export default function ExploitationPage() {
    const { id } = useParams<{ id: string }>();
    const [activeTab, setActiveTab] = useState<'contexte' | 'resultats'>('contexte');
    
    const exploitation = exploitations.find(exp => exp.id === id);
    const scenarioT0 = scenarios.find(s => s.exploitationId === id && s.type === 'T0');
    const scenarioPrev = scenarios.find(s => s.exploitationId === id && s.type === 'previsionnel');
    const resultatsT0 = resultatsScenarios.find(r => r.scenarioId === scenarioT0?.id);
    const resultatsPrev = resultatsScenarios.find(r => r.scenarioId === scenarioPrev?.id);

    if (!exploitation) {
        return (
            <Layout>
                <div className="text-center">
                    <h1 className="text-2xl font-bold text-red-600 mb-4">Exploitation non trouvée</h1>
                    <Link to="/" className="text-blue-600 hover:underline">
                        Retour à l'accueil
                    </Link>
                </div>
            </Layout>
        );
    }

    return (
        <Layout fullHeight>
            <div className="flex flex-col h-full p-6">
                {/* En-tête */}
                <div className="flex items-center justify-between mb-6">
                    <div>
                        <h1 className="text-3xl font-bold text-gray-900">{exploitation.nom}</h1>
                        <p className="text-gray-600">Code SAP : {exploitation.codeSAP}</p>
                        <p className="text-sm text-gray-500">{exploitation.typeDiag}</p>
                    </div>
                    <Link 
                        to="/"
                        className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                        Retour
                    </Link>
                </div>

                {/* Navigation des onglets */}
                <div className="border-b border-gray-200 mb-6">
                    <nav className="-mb-px flex space-x-8">
                        <button
                            onClick={() => setActiveTab('contexte')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${
                                activeTab === 'contexte'
                                    ? 'border-blue-500 text-blue-600'
                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                            }`}
                        >
                            Contexte Exploitation
                        </button>
                        <button
                            onClick={() => setActiveTab('resultats')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${
                                activeTab === 'resultats'
                                    ? 'border-blue-500 text-blue-600'
                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                            }`}
                        >
                            Résultats d'Analyse
                        </button>
                    </nav>
                </div>

                {/* Contenu des onglets */}
                <div className="flex-1 bg-gray-50 rounded-lg border p-6 overflow-y-auto">
                    {activeTab === 'contexte' ? (
                        <ContexteSection contexte={exploitation.contexte} />
                    ) : (
                        <ResultatsSection 
                            resultatsT0={resultatsT0} 
                            resultatsPrev={resultatsPrev}
                            scenarioT0={scenarioT0}
                            scenarioPrev={scenarioPrev}
                        />
                    )}
                </div>

                {/* Actions */}
                <div className="flex justify-center space-x-4 mt-6">
                    <Link
                        to={`/exploitation/${id}/scenario/T0`}
                        className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                    >
                        Voir / Remplir Scénario T0
                    </Link>
                    <Link
                        to={`/exploitation/${id}/scenario/previsionnel`}
                        className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                    >
                        Voir / Remplir Scénario Prévisionnel
                    </Link>
                    <Link
                        to={`/exploitation/${id}/comparaison`}
                        className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                    >
                        Comparaison des Scénarios
                    </Link>
                </div>
            </div>
        </Layout>
    );
}